// <auto-generated />
using System;
using EduViz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduViz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929063710_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduViz.Entities.Class", b =>
                {
                    b.Property<Guid>("classId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("className")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("mentorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("classId");

                    b.HasIndex("courseId");

                    b.HasIndex("mentorId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EduViz.Entities.Comment", b =>
                {
                    b.Property<Guid>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid?>("parentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("postId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("commentId");

                    b.HasIndex("parentCommentId");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EduViz.Entities.Course", b =>
                {
                    b.Property<Guid>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("beginingClass")
                        .HasColumnType("time");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("endingClass")
                        .HasColumnType("time");

                    b.Property<Guid>("mentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("schedule")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("courseId");

                    b.HasIndex("mentorId");

                    b.HasIndex("subjectId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduViz.Entities.MentorDetails", b =>
                {
                    b.Property<Guid>("mentorDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("vipExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("mentorDetailsId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("MentorDetails");
                });

            modelBuilder.Entity("EduViz.Entities.MentorSubject", b =>
                {
                    b.Property<Guid>("mentorSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("mentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("mentorSubjectId");

                    b.HasIndex("mentorId");

                    b.HasIndex("subjectId");

                    b.ToTable("MentorSubjects");
                });

            modelBuilder.Entity("EduViz.Entities.Payment", b =>
                {
                    b.Property<Guid>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("mentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("paymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("paymentId");

                    b.HasIndex("courseId");

                    b.HasIndex("mentorId");

                    b.HasIndex("studentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EduViz.Entities.Post", b =>
                {
                    b.Property<Guid>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("classId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.HasKey("postId");

                    b.HasIndex("classId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EduViz.Entities.Question", b =>
                {
                    b.Property<Guid>("questionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answerA")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("answerB")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("answerC")
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("answerD")
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("correctAnswer")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("questionText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("quizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("questionId");

                    b.HasIndex("quizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EduViz.Entities.Quiz", b =>
                {
                    b.Property<Guid>("quizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("classId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("duration")
                        .HasColumnType("time");

                    b.Property<string>("quizTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("quizId");

                    b.HasIndex("classId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("EduViz.Entities.StudentClass", b =>
                {
                    b.Property<Guid>("studentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("classId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("studentClassId");

                    b.HasIndex("classId");

                    b.HasIndex("userId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("EduViz.Entities.StudentQuizScore", b =>
                {
                    b.Property<Guid>("studentQuizScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("quizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("score")
                        .HasColumnType("float");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("studentQuizScoreId");

                    b.HasIndex("quizId");

                    b.HasIndex("userId");

                    b.ToTable("StudentQuizScores");
                });

            modelBuilder.Entity("EduViz.Entities.Subject", b =>
                {
                    b.Property<string>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("subjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EduViz.Entities.UpgradeOrderDetails", b =>
                {
                    b.Property<Guid>("upgradeOrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<Guid>("mentorDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("orderCode")
                        .HasColumnType("bigint");

                    b.Property<string>("packageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.HasKey("upgradeOrderDetailsId");

                    b.HasIndex("mentorDetailsID");

                    b.ToTable("UpgradeOrderDetails");
                });

            modelBuilder.Entity("EduViz.Entities.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("gender")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EduViz.Entities.UserCourse", b =>
                {
                    b.Property<Guid>("userCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("userCourseId");

                    b.HasIndex("courseId");

                    b.HasIndex("userId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("EduViz.Entities.Class", b =>
                {
                    b.HasOne("EduViz.Entities.Course", "course")
                        .WithMany("classes")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.MentorDetails", "mentor")
                        .WithMany("classes")
                        .HasForeignKey("mentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("mentor");
                });

            modelBuilder.Entity("EduViz.Entities.Comment", b =>
                {
                    b.HasOne("EduViz.Entities.Comment", "parentComment")
                        .WithMany("replies")
                        .HasForeignKey("parentCommentId");

                    b.HasOne("EduViz.Entities.Post", "post")
                        .WithMany("comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("parentComment");

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EduViz.Entities.Course", b =>
                {
                    b.HasOne("EduViz.Entities.MentorDetails", "mentor")
                        .WithMany("courses")
                        .HasForeignKey("mentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.Subject", "subject")
                        .WithMany("courses")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mentor");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("EduViz.Entities.MentorDetails", b =>
                {
                    b.HasOne("EduViz.Entities.User", "user")
                        .WithOne("mentorDetails")
                        .HasForeignKey("EduViz.Entities.MentorDetails", "userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EduViz.Entities.MentorSubject", b =>
                {
                    b.HasOne("EduViz.Entities.MentorDetails", "mentor")
                        .WithMany("mentorSubjects")
                        .HasForeignKey("mentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.Subject", "subject")
                        .WithMany("mentorSubjects")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("mentor");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("EduViz.Entities.Payment", b =>
                {
                    b.HasOne("EduViz.Entities.Course", "course")
                        .WithMany("payments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.MentorDetails", "mentor")
                        .WithMany("payments")
                        .HasForeignKey("mentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.User", "student")
                        .WithMany("payments")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("mentor");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EduViz.Entities.Post", b =>
                {
                    b.HasOne("EduViz.Entities.Class", "mentorClass")
                        .WithMany("posts")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("mentorClass");
                });

            modelBuilder.Entity("EduViz.Entities.Question", b =>
                {
                    b.HasOne("EduViz.Entities.Quiz", "quiz")
                        .WithMany("questions")
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("EduViz.Entities.Quiz", b =>
                {
                    b.HasOne("EduViz.Entities.Class", "mentorClass")
                        .WithMany("quizzes")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("mentorClass");
                });

            modelBuilder.Entity("EduViz.Entities.StudentClass", b =>
                {
                    b.HasOne("EduViz.Entities.Class", "mentorClass")
                        .WithMany("studentClasses")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.User", "user")
                        .WithMany("studentClasses")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mentorClass");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EduViz.Entities.StudentQuizScore", b =>
                {
                    b.HasOne("EduViz.Entities.Quiz", "quiz")
                        .WithMany("studentQuizScores")
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.User", "user")
                        .WithMany("studentQuizScores")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quiz");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EduViz.Entities.UpgradeOrderDetails", b =>
                {
                    b.HasOne("EduViz.Entities.MentorDetails", "mentorDetails")
                        .WithMany("upgradeOrderDetails")
                        .HasForeignKey("mentorDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mentorDetails");
                });

            modelBuilder.Entity("EduViz.Entities.UserCourse", b =>
                {
                    b.HasOne("EduViz.Entities.Course", "course")
                        .WithMany("userCourses")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduViz.Entities.User", "user")
                        .WithMany("userCourses")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EduViz.Entities.Class", b =>
                {
                    b.Navigation("posts");

                    b.Navigation("quizzes");

                    b.Navigation("studentClasses");
                });

            modelBuilder.Entity("EduViz.Entities.Comment", b =>
                {
                    b.Navigation("replies");
                });

            modelBuilder.Entity("EduViz.Entities.Course", b =>
                {
                    b.Navigation("classes");

                    b.Navigation("payments");

                    b.Navigation("userCourses");
                });

            modelBuilder.Entity("EduViz.Entities.MentorDetails", b =>
                {
                    b.Navigation("classes");

                    b.Navigation("courses");

                    b.Navigation("mentorSubjects");

                    b.Navigation("payments");

                    b.Navigation("upgradeOrderDetails");
                });

            modelBuilder.Entity("EduViz.Entities.Post", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("EduViz.Entities.Quiz", b =>
                {
                    b.Navigation("questions");

                    b.Navigation("studentQuizScores");
                });

            modelBuilder.Entity("EduViz.Entities.Subject", b =>
                {
                    b.Navigation("courses");

                    b.Navigation("mentorSubjects");
                });

            modelBuilder.Entity("EduViz.Entities.User", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("mentorDetails")
                        .IsRequired();

                    b.Navigation("payments");

                    b.Navigation("studentClasses");

                    b.Navigation("studentQuizScores");

                    b.Navigation("userCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
